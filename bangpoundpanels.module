<?php

/**
 * Implement hook_contextual_links_view_alter().
 */
function bangpoundpanels_contextual_links_view_alter(&$element, &$items) {

  // Add contextual link to edit mini block content.
  if (isset($element['#element']['#block']) && $element['#element']['#block']->module == 'panels_mini' && user_access('administer mini panels')) {
    $element['#links']['panels_mini-edit'] = array(
      'title' => 'Edit panel',
      'href' => 'admin/structure/mini-panels/list/'. $element['#element']['#block']->delta .'/edit/content',
      'query' => drupal_get_destination(),
    );
  }
}

/**
 * Implement hook_page_alter().
 *
 * Clumsy way to add contextual links to default panelizer display settings, etc.
 */
function bangpoundpanels_page_alter(&$page) {
  $current = page_manager_get_current_page();
  if ($current && $current['handler']->name == 'node_view_panelizer') {
    $context = $current['handler']->conf['context'];
    $content_type = $current['contexts'][$context]->data->type;
    $links = &$page['content']['system_main']['contextual_links']['#links'];

    $links['default_settings'] = array(
      'title' => 'Edit default panelizer settings',
      'href' => 'admin/config/content/panelizer/node/'. $content_type .'/settings',
      'query' => drupal_get_destination(),
    );
    $links['default_context'] = array(
      'title' => 'Edit default panelizer context',
      'href' => 'admin/config/content/panelizer/node/'. $content_type .'/context',
      'query' => drupal_get_destination(),
    );
    $links['default_layout'] = array(
      'title' => 'Edit default panelizer layout',
      'href' => 'admin/config/content/panelizer/node/'. $content_type .'/layout',
      'query' => drupal_get_destination(),
    );
    $links['default_content'] = array(
      'title' => 'Edit default panelizer content',
      'href' => 'admin/config/content/panelizer/node/'. $content_type .'/content',
      'query' => drupal_get_destination(),
    );
  }
}

/**
 * Implement hook_schema_alter().
 */
function bangpoundpanels_schema_alter(&$schema) {
  if (module_exists('panels')) {
    // Set default styles to naked.
    $schema['panels_display']['fields']['panel_settings']['object default']['style'] = variable_get('bangpoundpanels_display_default_style', 'naked');
    $schema['panels_pane']['fields']['style']['object default']['style'] = variable_get('bangpoundpanels_pane_default_style', 'naked');
  }
}

/**
 * Implementation of hook_ctools_plugin_directory()
 */
function bangpoundpanels_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implementation of hook_menu().
 */
function bangpoundpanels_menu() {
  $items = array();

  $items['autocomplete_bangpoundpanels'] = array(
    'page callback' => 'bangpoundpanels_autocomplete_content',
    'page arguments' => array(1, 2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 */
function bangpoundpanels_form_panels_edit_style_type_form_alter(&$form, $form_state) {

  // Add customization to panel pane style form

  // Unset options for which we have no need
  unset($form['style']['#options']['block']);
  unset($form['style']['#options']['rounded_corners']);

  // Set "no style" to be the default style
  $form['style']['#options']['default'] = t('Default Pane Style');
}

/**
 * Implementation of hook_form_FORM_ID_alter()
 */
function bangpoundpanels_form_views_content_views_panes_content_type_edit_form_alter(&$form, $form_state) {
  // Add customization to panel pane settings form
  // Get the configuration
  $conf = $form_state['conf'];

  // Only add style settings when we are on a node view
  list($name, $display_id) = explode('-', $form_state['subtype_name']);
  $view = views_get_view($name);
  $view->set_display($display_id);

  // Add the content setting fieldset
  if (isset($form['exposed']) && count($form['exposed']) > 1) {
    $form['exposed']['#title'] = t('General Settings');
    $form['exposed']['#type'] = 'fieldset';
    $form['exposed']['#weight'] = -10;
  }
  else {
    $form['exposed'] = array(
      '#type' => 'fieldset',
      '#title' => t('General Settings'),
      '#weight' => -10,
    );
  }

  // Add a widget title setting
  $form['exposed']['widget_title'] = array(
    '#field_prefix' => t('Title'),
    '#type' => 'textfield',
    '#size' => 30,
    '#weight' => -100,
    '#attributes' => (empty($conf['widget_title']) || empty($view->display_handler->options['title'])) ? array('placeholder' => '<No Title>') : array(),
    '#default_value' => (isset($conf['widget_title'])) ? $conf['widget_title'] : $view->display_handler->options['title'],
  );

  // Improve presentation of exposed sort options
  if (!empty($form['exposed']['sort_by'])) {
    $form['exposed']['sort_by']['#field_prefix'] = $form['exposed']['sort_by']['#title'];
    $form['exposed']['sort_by']['#title'] = '';
  }
  if (!empty($form['exposed']['sort_order'])) {
    $form['exposed']['sort_order']['#title'] = t('Sort order');
    $form['exposed']['sort_order']['#field_prefix'] = $form['exposed']['sort_order']['#title'];
    $form['exposed']['sort_order']['#title'] = '';
  }

  // Move items per page wiget to widget area
  if (isset($form['items_per_page'])) {
    $form['items_per_page']['#field_prefix'] = $form['items_per_page']['#title'];
    $form['items_per_page']['#title'] = '';
    $form['items_per_page']['#weight'] = -90;
    $form['exposed']['items_per_page'] = $form['items_per_page'];
    unset($form['items_per_page']);
  }

  // Update field setting options
  if (isset($form['fields_override'])) {
    $form['fields_override']['#title'] = t('Field Settings');
    $form['fields_override']['#collapsible'] = FALSE;
    foreach($form['fields_override'] as &$field) {
      if (is_array($field)) {
        $field['#title'] = t('Display') . ' ' . $field['#title'];
      }
    }
  }

  if ($view->display_handler->get_option('row_plugin') == 'node' && in_array($view->display_handler->get_option('style_plugin'), array('default', 'slideshow'))) {
    // Add the style setting fieldset
    $form['style_settings'] = array(
      '#type' => 'fieldset',
      '#title' => 'Style Settings',
    );

    // Add specific style options
    $form['style_settings']['view_mode'] = array(
      '#type' => 'radios',
      '#options' => _bangpoundpanels_view_mode_options(),
      '#default_value' => $conf['view_mode'] ? $conf['view_mode'] : 'teaser',
    );
    $form['style_settings']['links'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display links'),
      '#default_value' => $conf['links'] ? $conf['links'] : TRUE,
    );
    $form['style_settings']['comments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display comments'),
      '#default_value' => $conf['comments'] ? $conf['comments'] : FALSE,
    );

  }

  // Add a custom submit handler
  $form['#submit'][] = 'bangpoundpanels_views_view_mode_pane_submit';

  if (isset($form['exposed']['filter-title']['title']) && isset($view->display_handler->options['filters']['type']['value']) && count($view->display_handler->options['filters']['type']['value']) == 1) {
    $node_type = implode('', $view->display_handler->options['filters']['type']['value']);
    $form['exposed']['filter-title']['title']['#autocomplete_path'] = 'autocomplete_bangpoundpanels/' . $node_type;
    $form['exposed']['filter-title']['title']['#size'] = 60;
  }
}

/**
 * Custom submit handler to save panels pane configuration for styling
 */
function bangpoundpanels_views_view_mode_pane_submit(&$form, &$form_state) {

  // Store the view mode, comments and link options.
  foreach (array('view_mode', 'comments', 'links') as $key) {
    $form_state['conf'][$key] = (isset($form_state['values'][$key])) ? $form_state['values'][$key] : NULL;
  }

  // Set the $conf['widget_title'] value. We need to do this a
  // little funky since sometimes it comes inside of $form_state['values']
  // and sometimes it doesn't.
  if (isset($form_state['values']['exposed']['widget_title'])) {
    $form_state['conf']['widget_title'] = $form_state['values']['exposed']['widget_title'];
  }
  elseif (isset($form_state['values']['widget_title'])) {
    $form_state['conf']['widget_title'] = $form_state['values']['widget_title'];
  }
  else {
    $form_state['conf']['widget_title'] = NULL;
  }

  // Set the $conf['items_per_page'] value. We need to do this a
  // little funky since sometimes it comes inside of $form_state['values']
  // and sometimes it doesn't.
  if (isset($form_state['values']['exposed']['items_per_page'])) {
    $form_state['conf']['items_per_page'] = $form_state['values']['exposed']['items_per_page'];
  }
  elseif (isset($form_state['values']['items_per_page'])) {
    $form_state['conf']['items_per_page'] = $form_state['values']['items_per_page'];
  }
  else {
    $form_state['conf']['items_per_page'] = NULL;
  }
}

/**
 * Implementation of hook_views_pre_render()
 */
function bangpoundpanels_views_pre_render(&$view) {
  if (isset($view->display_handler->options['pane_conf'])) {
    $conf = $view->display_handler->options['pane_conf'];

    // Set the view title depending on where it comes. We do this a little
    // funky since sometimes it comes inside of $form_state['values'] and
    // sometimes it doesn't.
    if (isset($conf['widget_title']) || isset($conf['exposed']['widget_title'])) {
      $view->display_handler->options['title'] = (isset($conf['exposed']['widget_title'])) ? $conf['exposed']['widget_title'] : $conf['widget_title'];
    }

    // Set the view mode, comments and link options.
    foreach (array('view_mode', 'comments', 'links') as $key) {
      if (isset($conf[$key])) {
        $view->style_plugin->row_plugin->options[$key] = $conf[$key];
      }
    }
  }
}

/**
 * Helpfer function to get view modes
 */
function _bangpoundpanels_view_mode_options() {
  $entity_info = entity_get_info('node');
  $options = array();
  if (!empty($entity_info['view modes'])) {
    foreach ($entity_info['view modes'] as $mode => $settings) {
      if (!in_array($mode, array('rss', 'search_index', 'search_result', 'token'))) {
        $options[$mode] = $settings['label'];
      }
    }
  }
  return $options;
}

/**
 * Callback to do autocomplete for basic content
 */
function bangpoundpanels_autocomplete_content($node_type, $string) {
  $matches = array();
  if ($string) {
    $result = db_select('node')
      ->fields('node', array('title'))
      ->condition('node.status','1')
      ->condition('node.type', $node_type)
      ->condition('title', '%' . db_like($string) . '%', 'LIKE')
      ->range(0, 10)
      ->execute();
    foreach ($result as $node) {
      $matches[$node->title] = check_plain($node->title);
    }
  }

  drupal_json_output($matches);
}

/**
 * Implement hook_panels_pre_render().
 *
 * Force style settings on panes in regions whose style has a 'pane style'.
 */
function bangpoundpanels_panels_pre_render($display, $renderer) {
  $styles = panels_get_styles();
  $default = !empty($display->panel_settings['style']) ? $display->panel_settings['style'] : 'default';

  // Loop through each region of the display to inspect the region's style.
  foreach (array_keys($renderer->plugins['layout']['regions']) as $region_id) {

    // If the region's style has not been set or is -1 (display default), use display
    // default.
    if (empty($display->panel_settings[$region_id]['style']) || $display->panel_settings[$region_id]['style'] == -1) {
      $style = $styles[$default];
    }

    // Otherwise, use the region's style.
    else {
      $style = $styles[$display->panel_settings[$region_id]['style']];
    }

    // If the region's style has a 'pane style' property, rewrite the style settings for
    // every pane in that region.
    if (isset($style['pane style'])) {
      foreach ($display->panels[$region_id] as $pane_id) {
        $display->content[$pane_id]->style['style'] = $style['pane style'];
      }
    }
  }
}
